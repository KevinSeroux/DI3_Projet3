/**************************************************
Titre: Classe pour la gestion de Matrices de type 
quelconque
***************************************************
Entete de la Classe CMatrix
Permet de créer des Matrices et d'effectuer des 
opérations élémentaires dessus (transposition, 
addition, soustraction, multiplication, division etc...)
**************************************************/



/**************************************************
* CMatrix
* *************************************************
* Constructeur
* *************************************************
* Entrée: nombre de lignes, nombre de colonnes
* Pré-condition :
* Sortie :
* Post-condition : la matrice est créée avec le bon
nombre de lignes et de colonnes, lance une exception
si une des taille est à 0.
* ************************************************/

/**************************************************
* CMatrix
* *************************************************
* Constructeur de recopie
* *************************************************
* Entrée: matrice
* Pré-condition :
* Sortie :
* Post-condition : crée une copie de la matrice
passée en paramètre
* ************************************************/

/**************************************************
* ~CMatrix
* *************************************************
* Destructeur par défaut
* *************************************************
* Entrée:
* Pré-condition :
* Sortie :
* Post-condition : Détruit la matrice correctment
* ************************************************/

/**************************************************
* operator+
* *************************************************
* Surcharge de l'addition
* *************************************************
* Entrée: matrice
* Pré-condition : les matrice doivent être additionables, 
la surcharge de l'addition des objets de type T
est définie
* Sortie : matrice résultat
* Post-condition : renvoie la matrice correspondant
à cette addition. Lance une exception si l'addition
est impossible (matrices de taille différentes).
* ************************************************/

/**************************************************
* operator+=
* *************************************************
* Surchage de l'association additive
* *************************************************
* Entrée: matrice
* Pré-condition : on peut additionner les matrices, 
la surcharge de l'addition des objets de type T
est définie
* Sortie :
* Post-condition : ajoute à la matrice actuelle la
matrice passée en paramètre. 
* ************************************************/

/**************************************************
* operator-
* *************************************************
* Surcharge de la soustraction
* *************************************************
* Entrée: matrice
* Pré-condition : on peut soustraire ces 2 matrices, 
la surcharge de la soustraction des objets de type T
est définie
* Sortie : matrice résultat
* Post-condition : revoie le résutat de la matrice
actuelle moins la matrice passée en paramètre. 
Lance une exception si la soustraction est impossible 
(matrices de taille différentes).
* ************************************************/

/**************************************************
* operator-=
* *************************************************
* Surcharge de l'association soustractive
* *************************************************
* Entrée: matrice
* Pré-condition : on peut soustraire les matrices, 
la surcharge de la soustraction des objets de type T
est définie
* Sortie :
* Post-condition : soustrait à la matrice actuelle 
la matrice passée en paramètre. Lance une exception 
si la soustraction est impossible (matrices de 
taille différentes).
* ************************************************/

/**************************************************
* operator*
* *************************************************
* Surcharge de la multiplication par une matrice
* *************************************************
* Entrée: matrice
* Pré-condition : les matrices sont multipliable, 
la surcharge de la multiplication et l'addition des 
objets de type T est définie
* Sortie : matrice résultat
* Post-condition : renvoie le résultat de la 
multiplication des deux matrices. Lance une exception 
si elle ne sont pas multipliables.
* ************************************************/

/**************************************************
* operator *=
* *************************************************
* Surcharge de l'association multiplicative par une matrice
* *************************************************
* Entrée: matrice
* Pré-condition : les matrices sont multipliable, 
la surcharge de la multiplication et l'addition des 
objets de type T est définie 
* Sortie : 
* Post-condition : stocke dans la matrice actuelle 
le résultat de celle-ci multipliée par celle en 
paramètre. Lance une exception si elles ne sont pas 
multipliable.
* ************************************************/

/**************************************************
* operator*
* *************************************************
* Surcharge de la multiplication par un objet de type T
* *************************************************
* Entrée: objet constant de type T
* Pré-condition : la surcharge de la multiplication 
des objets de type T est définie
* Sortie : matrice résultat
* Post-condition : renvoie le résultat de la 
multiplication de la matrice actuelle par la matrice 
passée en paramètre.
* ************************************************/

/**************************************************
* operator*=
* *************************************************
* Surcharge de l'association multiplicative
* *************************************************
* Entrée: objet constant de type T
* Pré-condition : la surcharge de la multiplication 
des objets de type T est définie
* Sortie :
* Post-condition : on stocke dans la matrice actuelle 
le résultat de la multiplication par l'objet passé 
en paramètre.
* ************************************************/

/**************************************************
* operator/						//Vraiment nécessaire?
* *************************************************
* 
* *************************************************
* Entrée: matrice
* Pré-condition :
* Sortie :
* Post-condition : 
* ************************************************/

/**************************************************
* operator/=						//Vraiment nécessaire?
* *************************************************
* 
* *************************************************
* Entrée: matrice
* Pré-condition :
* Sortie :
* Post-condition : 
* ************************************************/

/**************************************************
* operator/
* *************************************************
* Surcharge de la division par un objet de type T
* *************************************************
* Entrée: objet constant de type T
* Pré-condition : la matrice doit être divisible par 
le paramètre, la surcharge de la division des objets 
de type T doit être définie. 
* Sortie : matrice résultat
* Post-condition : retourne le résultat de la division 
de la matrice par l'objet passé en paramètre.
* ************************************************/

/**************************************************
* operator/=
* *************************************************
* Surcharge de l'association avec division par un 
objet de type T
* *************************************************
* Entrée: Objet constant de type T
* Pré-condition : la matrice doit être divisible par 
l'objet en paramètre. La surcharge de la division de 
la matrice par l'objet passé en paramètre doit être définie.
* Sortie :
* Post-condition : Stocke dans la matrice actuelle 
le résultat de la division de la matrice par l'objet 
en paramètre.
* ************************************************/

/**************************************************
* MATtranspose
* *************************************************
* Renvoie la matrice transposée
* *************************************************
* Entrée: 
* Pré-condition : 
* Sortie : Matrice transposée
* Post-condition : renvoie une nouvelle matrice égale 
à la transposée de la matrice actuelle.
* ************************************************/

/**************************************************
* operator=
* *************************************************
* surcharge de l'opérateur d'affectation
* *************************************************
* Entrée: matrice
* Pré-condition : 
* Sortie : 
* Post-condition : stocke dans la matrice courante 
le contenu de la matrice passée en paramètre.
* ************************************************/

/**************************************************
* operator==
* *************************************************
* Surcharge de l'opérateur de test d'égalité
* *************************************************
* Entrée: matrice
* Pré-condition : les matrices sont comparable (même taille)
* Sortie : booléen
* Post-condition : renvoie faux si les matrices sont 
différentes, vrai sinon, lance une exception si elles 
ne sont pas comparables.
* ************************************************/

/**************************************************
* operator()
* *************************************************
* Surcharge de l'opérateur parenthèses			//CARTOUCHE A COMPLETER
* *************************************************
* Entrée:
* Pré-condition :
* Sortie :
* Post-condition : 
* ************************************************/

/**************************************************
* operator()
* *************************************************
* 							//CARTOUCHE A COMPLETER
* *************************************************
* Entrée:
* Pré-condition :
* Sortie :
* Post-condition : 
* ************************************************/

/**************************************************
* MATgetCountRows
* *************************************************
* Accesseur au nombre de lignes
* *************************************************
* Entrée:
* Pré-condition :
* Sortie : nombre de lignes
* Post-condition : renvoie le nombre de lignes
* ************************************************/

/**************************************************
* MATgetCountColumns
* *************************************************
* Accesseur au nombre de colonnes
* *************************************************
* Entrée:
* Pré-condition :
* Sortie : nombre de colonnes
* Post-condition : renvoie le nombre de colonnes
* ************************************************/

/**************************************************
* operator*
* *************************************************
* Surcharge de l'opérateur de multiplication
* *************************************************
* Entrée: Objet de type T, matrice d'objets de type T
* Pré-condition : la matrice passée en paramètre peut 
être multipliée par l'objet passé en paramètre, la 
surcharge de la multiplication est définie pour les 
objets de type T
* Sortie : matrice résultat
* Post-condition : renvoie la matrice résultant de 
cette opération
* ************************************************/

/**************************************************
* operator/
* *************************************************
* Surcharge de l'opérateur de multiplication
* *************************************************
* Entrée: Objet de type T, matrice d'objets de type T
* Pré-condition : la matrice passée en paramètre peut 
être divisée par l'objet passé en paramètre, la 
surcharge de la division est définie pour les 
objets de type T
* Sortie : matrice résultat
* Post-condition : renvoie la matrice résultant de 
cette opération
* ************************************************/

/**************************************************
* operator<<
* *************************************************
* Surcharge de l'opérateur de flux de sortie (permet 
d'afficher la matrice comme n'importe quel autre objet)
* *************************************************
* Entrée: flux de sortie, matrice
* Pré-condition : la surcharge de l'opérateur de flux 
de sortie doit être définie pour les objets de type T
* Sortie : flux de sortie
* Post-condition : la matrice est écrite dans le 
flux de sortie en paramètre
* ************************************************/